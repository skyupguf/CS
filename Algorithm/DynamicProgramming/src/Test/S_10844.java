package Test;
//  쉬운 계단 수 (https://www.acmicpc.net/problem/10844)
/*
*   45656과 같이 인접한 모든 자리의 차이가 1인 수를 계단 수라고 한다.
*   N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.

    조건
    - 첫째 줄에 N이 입력된다. (1 <= N <= 100)
    - 첫째 줄에 1,000,000,000으로 나눈 나머지를 정수로 출력한다.

    입출력 예시
    1. Input : 1, Output : 9
    2. Input : 2, Output : 17
    3. Input : 3, Output : 32
    4. Input : 4, Output : 61
    5. Input : 5, Output : 116

*   풀이
*   N = 1 부터 증가할 때 마다 다음과 같이 수를 만들 수 있다.
*   0    1    2    3    4    5    6    7    8    9    10
*
*   N = 2
*   0    10   21   32   43   54   65   76   87   98   0
*        12   23   34   45   56   67   78   89
*
*   N = 3
*   0    101  210  321  432  543  654  765  876  987  0
*        121  212  323  434  545  656  767  878  989
*        123  232  343  454  565  676  787  898
*             234  345  456  567  678  789
*
*   N = 4
*   0    1010 2101 3210 4321 5432 6543 7654 8765 9876 0
*        1012 2121 3212 4323 5434 6545 7656 8767 9878
*        1210 2123 3232 4343 5454 6565 7676 8787 9898
*        1212 2321 3234 4345 5456 6567 7678 8789
*        1232 2323 3432 4543 5654 6765 7876 8987
*        1234 2343 3434 4545 5656 6767 7878 8989
*             2345 3454 4565 5676 6787 7898
*                  3456 4567 5678 6789

    0    0    0    0    0    0    0    0    0    0    0
    1    1    1    1    1    1    1    1    1    1    0
    1    2    2    2    2    2    2    2    2    1    0
    2    3    4    4    4    4    4    4    3    2    0
    3    6    7    8    8    8    8    7    6    3    0

*   위 결과대로 점화식을 세워보면
*   i가 2일 때부터 j가 1에서 시작해 dp[i][j] = dp[i-1][j-1] + dp[i-1][j]가 된다.
*   자리수 1의 경우 점화식대로 만들기 위해 0번 째에 이전 N길이 1번을 0번에 할당한다.
* */

import java.io.*;

public class S_10844 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        long[][] dp = new long[N+1][11];

        for (int i = 0; i < 10; i++) {
            dp[1][i] = 1;
        }

        for (int i = 2; i <= N; i++) {
            dp[i][0] = dp[i-1][1];

            for (int j = 1; j < 10; j++) {
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % 1000000000;
            }
        }

        long result = 0;
        for (int i = 1; i < 10; i++) {
            result += dp[N][i];
        }
        System.out.println(result % 1000000000);
    }
}
